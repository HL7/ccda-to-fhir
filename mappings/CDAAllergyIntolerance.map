map "http://hl7.org/fhir/cda/mapping/cdaAllergyIntolerance" = "C-CDA AllergyIntolerance"

uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias Bundle as target
uses "http://hl7.org/fhir/StructureDefinition/Patient" alias Patient as source
uses "http://hl7.org/fhir/cda/StructureDefinition/Act" alias Act as source
uses "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance" alias AllergyIntolerance as source

imports "http://hl7.org/fhir/cda/mapping/cdaToFhirTypes"
imports "http://hl7.org/fhir/cda/mapping/ClinicalDocumentToFHIR"

group AllergySection(source source : Section, source patient : Patient, target bundle : Bundle, target target) extends ClinicalDocumentSection {
  source.entry as allergyEntry ->  bundle.entry as e,  e.resource = create('AllergyIntolerance') as allergy,  target.entry = reference(allergy) then {
    allergyEntry.act as allergyAct then AllergyIntolerance(allergyAct, patient, bundle, allergy);
  };
}

group AllergyIntolerance(source source : Act, source patient : Patient, target bundle : Bundle, target allergy : AllergyIntolerance) {
  source.templateId as template then TemplateID(template, allergy) "templateID";
  source.id -> allergy.identifier;
  source.statusCode -> allergy.clinicalStatus;
  source.effectiveTime as effectiveTime -> allergy.onset;
  patient -> allergy.patient = reference(patient) "patient"; // We can only handle the first author
  source.author as author then {
    author.time -> allergy.assertedDate;
    author.assignedAuthor as assignedAuthor ->  bundle.entry as e,  e.resource = create('Practitioner') as practitioner,  allergy.recorder = reference(practitioner) then ClinicalDocumentAuthorPractitioner(author, practitioner) "recorder";
  };
  source.entryRelationship as entry then {
    entry.observation as observation then {
      observation.negationInd as negation then Negation(negation, allergy);
      observation.templateId as template then TemplateID(template, allergy) "templateID";
      observation.value -> allergy.code;
      observation.participant as participant then {
        participant.participantRole as role then {
          role.playingEntity as entity -> allergy.reaction as reaction then {
            entity.code -> reaction.substance;
          } "entity";
        } "role";
      } "consumable";
      observation.entryRelationship as entry where typeCode = 'MFST' -> allergy.reaction as reaction then {
        entry.observation as reactionObs then {
          reactionObs.effectiveTime as time then {
            time.low -> reaction.onset;
          };
          reactionObs.value -> reaction.manifestation;
          reactionObs.entryRelationship as sevEntry where typeCode = 'SUBJ' then {
            sevEntry.observation as severity then {
              severity.value -> reaction.severity "severity";
            };
          } "severity";
        } "reaction";
      } "reaction";
      observation.entryRelationship as criticalityEntry where typeCode = 'SUBJ' then {
        criticalityEntry.observation as criticalityObservation then {
          criticalityObservation.value -> allergy.criticality "code";
        };
      } "criticality";
    };
  } "entry";
}

